{"ast":null,"code":"import { Injectable, Inject, PLATFORM_ID, EventEmitter, Component, Input, ViewEncapsulation, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IconModule } from '@acpaas-ui/ngx-icon';\nimport { FlyoutModule } from '@acpaas-ui/ngx-flyout';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/map.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@acpaas-ui/ngx-icon';\nimport * as ɵngcc2 from '@acpaas-ui/ngx-flyout';\nimport * as ɵngcc3 from '@angular/common';\nconst _c0 = [\"map\"];\nconst _c1 = [\"content\"];\nconst _c2 = [\"*\", [[\"\", \"controls\", \"\", \"top\", \"\", \"left\", \"\"]], [[\"\", \"controls\", \"\", \"top\", \"\", \"right\", \"\"]], [[\"\", \"controls\", \"\", \"bottom\", \"\", \"right\", \"\"]], [[\"\", \"controls\", \"\", \"bottom\", \"\", \"left\", \"\"]]];\nconst _c3 = function (a0) {\n  return {\n    \"is-full-screen\": a0\n  };\n};\nconst _c4 = function (a0) {\n  return {\n    \"has-content\": a0\n  };\n};\nconst _c5 = [\"*\", \"[controls][top][left]\", \"[controls][top][right]\", \"[controls][bottom][right]\", \"[controls][bottom][left]\"];\nlet MapService = /*#__PURE__*/(() => {\n  class MapService {\n    // tslint:disable-next-line:ban-types\n    /**\n     * @param {?} platformId\n     */\n    constructor(platformId) {\n      this.platformId = platformId;\n      this.L = null;\n      this.esri = null;\n      this.requireMap();\n    }\n    /**\n     * @return {?}\n     */\n    requireMap() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.L = require('leaflet');\n        this.esri = require('esri-leaflet');\n        require('leaflet-draw');\n      }\n    }\n    /**\n     * @return {?}\n     */\n    isAvailable() {\n      if (isPlatformBrowser(this.platformId)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n  MapService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac\n  });\n  /** @nocollapse */\n  return MapService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  MapService.prototype.L;\n  /** @type {?} */\n  MapService.prototype.esri;\n  /**\n   * @type {?}\n   * @private\n   */\n  MapService.prototype.platformId;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/classes/leaflet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LeafletMap {\n  /**\n   * @param {?} options\n   * @param {?} mapService\n   */\n  constructor(options, mapService) {\n    this.options = options;\n    this.mapService = mapService;\n    this.locating = false;\n    this.fullScreen = false;\n    this.onInit = new EventEmitter();\n    this.modes = {\n      DRAGGING: 0,\n      DRAWING_POLYGON: 1,\n      DRAWING_LINE: 2\n    };\n    this.mode = this.modes.DRAGGING;\n    this.initialized = false;\n    // DRAWING\n    this.switchToDragging =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this.mapService.isAvailable()) {\n        this.mode = this.modes.DRAGGING;\n        if (this.polygonDrawer) {\n          this.polygonDrawer.disable();\n          this.polygonDrawer = undefined;\n        }\n        if (this.lineDrawer) {\n          this.lineDrawer.disable();\n          this.lineDrawer = undefined;\n        }\n        this.map.off(this.mapService.L.Draw.Event.CREATED);\n        this.map.off(this.mapService.L.Draw.Event.DRAWSTOP);\n      }\n    };\n    this.handleDrawPolygon =\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      this.map.addLayer(e.layer);\n      this.options.onAddPolygon(e.layer);\n      this.switchToDragging();\n    };\n    this.handleDrawLine =\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      this.map.addLayer(e.layer);\n      this.options.onAddLine(e.layer);\n      this.switchToDragging();\n    };\n    this.stopEditLayer =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this.editingLayer) {\n        this.editingLayer.editing.disable();\n        this.editingLayer.off('edit');\n      }\n      this.map.off('click', this.stopEditLayer);\n    };\n  }\n  // LIFECYCLE\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  init(element) {\n    if (this.mapService.isAvailable()) {\n      this.initialized = true;\n      this.map = this.mapService.L.map(element, {\n        center: this.options.center,\n        zoom: this.options.zoom,\n        attributionControl: false,\n        zoomControl: false,\n        scrollWheelZoom: false\n      });\n      this.onInit.emit();\n    }\n  }\n  // LAYERS\n  /**\n   * @param {?} layer\n   * @return {?}\n   */\n  addTileLayer(layer) {\n    if (this.mapService.isAvailable()) {\n      /** @type {?} */\n      const tileLayer = new this.mapService.L.TileLayer(layer.url, layer.options);\n      this.map.addLayer(tileLayer);\n      return tileLayer;\n    }\n  }\n  /**\n   * @param {?} config\n   * @return {?}\n   */\n  addFeatureLayer(config) {\n    if (this.mapService.isAvailable()) {\n      /** @type {?} */\n      const featureLayer = new this.mapService.esri.featureLayer(config);\n      this.map.addLayer(featureLayer);\n      return featureLayer;\n    }\n  }\n  /**\n   * @param {?} geoJSON\n   * @param {?} config\n   * @return {?}\n   */\n  addGeoJSON(geoJSON, config) {\n    if (this.mapService.isAvailable()) {\n      /** @type {?} */\n      const geoJSONLayer = this.mapService.L.geoJSON(geoJSON, config);\n      geoJSONLayer.addTo(this.map);\n      return geoJSONLayer;\n    }\n  }\n  /**\n   * @param {?} featureLayers\n   * @return {?}\n   */\n  fitFeatureLayers(featureLayers) {\n    if (this.mapService.isAvailable()) {\n      /** @type {?} */\n      const bounds = this.mapService.L.latLngBounds([]);\n      /** @type {?} */\n      let counter = 0;\n      featureLayers.forEach(\n      /**\n      * @param {?} featureLayer\n      * @return {?}\n      */\n      featureLayer => {\n        featureLayer.once('load',\n        /**\n        * @return {?}\n        */\n        () => {\n          counter++;\n          featureLayer.eachFeature(\n          /**\n          * @param {?} layer\n          * @return {?}\n          */\n          layer => {\n            bounds.extend(layer.getBounds());\n          });\n          if (counter === featureLayers.length && bounds.isValid()) {\n            this.map.fitBounds(bounds);\n          }\n        });\n      });\n    }\n  }\n  /**\n   * @param {?} layer\n   * @return {?}\n   */\n  removeLayer(layer) {\n    this.map.removeLayer(layer);\n  }\n  // FULLSCREEN\n  /**\n   * @return {?}\n   */\n  toggleFullScreen() {\n    this.fullScreen = !this.fullScreen;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.update();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  update() {\n    if (this.initialized) {\n      this.map.invalidateSize();\n    }\n  }\n  // ZOOMING\n  /**\n   * @return {?}\n   */\n  zoomIn() {\n    if (this.initialized) {\n      this.map.zoomIn();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  zoomInDisabled() {\n    if (this.initialized) {\n      return this.map.getMaxZoom() <= this.map.getZoom();\n    }\n    return true;\n  }\n  /**\n   * @return {?}\n   */\n  zoomOut() {\n    if (this.initialized) {\n      this.map.zoomOut();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  zoomOutDisabled() {\n    if (this.initialized) {\n      return this.map.getMinZoom() >= this.map.getZoom();\n    }\n    return true;\n  }\n  // CENTERING\n  /**\n   * @param {?} zoomLevel\n   * @return {?}\n   */\n  locate(zoomLevel) {\n    if (!this.locating && this.initialized) {\n      this.locating = true;\n      this.map.locate();\n      this.map.on('locationfound',\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => {\n        this.locating = false;\n        this.map.setView(e.latlng, zoomLevel);\n        this.map.off('locationfound');\n      });\n    }\n  }\n  /**\n   * @param {?} center\n   * @param {?} zoom\n   * @return {?}\n   */\n  setView(center, zoom) {\n    if (this.initialized) {\n      this.map.setView(center, zoom);\n    }\n  }\n  // DRAWING: POLYGON\n  /**\n   * @return {?}\n   */\n  switchToPolygon() {\n    if (this.mapService.isAvailable()) {\n      this.switchToDragging();\n      this.mode = this.modes.DRAWING_POLYGON;\n      if (!this.polygonDrawer) {\n        this.polygonDrawer = new this.mapService.L.Draw.Polygon(this.map, {\n          shapeOptions: this.options.polygonColor ? {\n            color: this.options.polygonColor\n          } : {}\n        });\n        this.polygonDrawer.enable();\n        this.map.on(this.mapService.L.Draw.Event.CREATED, this.handleDrawPolygon);\n        this.map.on(this.mapService.L.Draw.Event.DRAWSTOP, this.switchToDragging);\n      }\n    }\n  }\n  // DRAWING: LINES\n  /**\n   * @return {?}\n   */\n  switchToLine() {\n    if (this.mapService.isAvailable()) {\n      this.switchToDragging();\n      this.mode = this.modes.DRAWING_LINE;\n      if (!this.lineDrawer) {\n        this.lineDrawer = new this.mapService.L.Draw.Polyline(this.map, {\n          shapeOptions: this.options.lineColor ? {\n            color: this.options.lineColor\n          } : {}\n        });\n        this.lineDrawer.enable();\n        this.map.on(this.mapService.L.Draw.Event.CREATED, this.handleDrawLine);\n        this.map.on(this.mapService.L.Draw.Event.DRAWSTOP, this.switchToDragging);\n      }\n    }\n  }\n  // EDIT: LAYER\n  /**\n   * @param {?} layer\n   * @return {?}\n   */\n  startEditLayer(layer) {\n    this.stopEditLayer();\n    this.editingLayer = layer;\n    // TODO: temp workaround for chrome 62\n    // https://github.com/Leaflet/Leaflet.draw/issues/804\n    this.editingLayer.options.editing = this.editingLayer.options.editing || (this.editingLayer.options.editing = {});\n    this.editingLayer.editing.enable();\n    this.map.on('click', this.stopEditLayer);\n    this.editingLayer.on('edit',\n    /**\n    * @return {?}\n    */\n    () => {\n      this.editingLayer.feature = this.editingLayer.toGeoJSON();\n      this.options.onEditFeature(this.editingLayer.toGeoJSON());\n    });\n  }\n  // MARKERS\n  /**\n   * @param {?} position\n   * @param {?=} options\n   * @return {?}\n   */\n  addMarker(position, options) {\n    if (this.mapService.isAvailable()) {\n      return this.mapService.L.marker(position, options).addTo(this.map);\n    }\n  }\n  /**\n   * @param {?} position\n   * @param {?} html\n   * @return {?}\n   */\n  addHtmlMarker(position, html) {\n    if (this.mapService.isAvailable()) {\n      /** @type {?} */\n      const customIcon = this.mapService.L.divIcon({\n        html,\n        className: 'aui-leaflet__html-icon'\n      });\n      return this.mapService.L.marker(position, {\n        icon: customIcon\n      }).addTo(this.map);\n    }\n  }\n}\nif (false) {\n  /** @type {?} */\n  LeafletMap.prototype.map;\n  /** @type {?} */\n  LeafletMap.prototype.locating;\n  /** @type {?} */\n  LeafletMap.prototype.fullScreen;\n  /** @type {?} */\n  LeafletMap.prototype.onInit;\n  /** @type {?} */\n  LeafletMap.prototype.modes;\n  /** @type {?} */\n  LeafletMap.prototype.mode;\n  /**\n   * @type {?}\n   * @private\n   */\n  LeafletMap.prototype.initialized;\n  /**\n   * @type {?}\n   * @private\n   */\n  LeafletMap.prototype.polygonDrawer;\n  /**\n   * @type {?}\n   * @private\n   */\n  LeafletMap.prototype.lineDrawer;\n  /**\n   * @type {?}\n   * @private\n   */\n  LeafletMap.prototype.editingLayer;\n  /** @type {?} */\n  LeafletMap.prototype.switchToDragging;\n  /** @type {?} */\n  LeafletMap.prototype.handleDrawPolygon;\n  /** @type {?} */\n  LeafletMap.prototype.handleDrawLine;\n  /** @type {?} */\n  LeafletMap.prototype.stopEditLayer;\n  /** @type {?} */\n  LeafletMap.prototype.options;\n  /** @type {?} */\n  LeafletMap.prototype.mapService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-control/leaflet-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletControlComponent = /*#__PURE__*/(() => {\n  class LeafletControlComponent {\n    constructor() {\n      this.ariaLabel = '';\n    }\n  }\n  LeafletControlComponent.ɵfac = function LeafletControlComponent_Factory(t) {\n    return new (t || LeafletControlComponent)();\n  };\n  LeafletControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletControlComponent,\n    selectors: [[\"aui-leaflet-control\"]],\n    inputs: {\n      ariaLabel: \"ariaLabel\",\n      icon: \"icon\",\n      disabled: \"disabled\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[\"type\", \"button\", 1, \"o-leaflet__control\", \"a-button\", \"a-button--small\", \"has-icon\", 3, \"disabled\"], [3, \"name\", \"ariaLabel\"]],\n    template: function LeafletControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵelement(1, \"aui-icon\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"name\", ctx.icon)(\"ariaLabel\", ctx.ariaLabel);\n      }\n    },\n    dependencies: [ɵngcc1.IconComponent],\n    encapsulation: 2\n  });\n  return LeafletControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletControlComponent.prototype.icon;\n  /** @type {?} */\n  LeafletControlComponent.prototype.disabled;\n  /** @type {?} */\n  LeafletControlComponent.prototype.ariaLabel;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-drag-control/leaflet-drag-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletDragControlComponent = /*#__PURE__*/(() => {\n  class LeafletDragControlComponent {}\n  LeafletDragControlComponent.ɵfac = function LeafletDragControlComponent_Factory(t) {\n    return new (t || LeafletDragControlComponent)();\n  };\n  LeafletDragControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletDragControlComponent,\n    selectors: [[\"aui-leaflet-drag-control\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"icon\", \"ai-direction-button-arrows\", \"ariaLabel\", \"Sleepmodus (de)activeren\", 3, \"click\"]],\n    template: function LeafletDragControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"aui-leaflet-control\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletDragControlComponent_Template_aui_leaflet_control_click_0_listener() {\n          return ctx.map == null ? null : ctx.map.switchToDragging();\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [LeafletControlComponent],\n    encapsulation: 2\n  });\n  return LeafletDragControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletDragControlComponent.prototype.map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-draw-control/leaflet-draw-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletDrawControlComponent = /*#__PURE__*/(() => {\n  class LeafletDrawControlComponent {}\n  LeafletDrawControlComponent.ɵfac = function LeafletDrawControlComponent_Factory(t) {\n    return new (t || LeafletDrawControlComponent)();\n  };\n  LeafletDrawControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletDrawControlComponent,\n    selectors: [[\"aui-leaflet-draw-control\"]],\n    decls: 11,\n    vars: 0,\n    consts: [[\"auiFlyout\", \"\"], [\"auiFlyoutAction\", \"\", \"type\", \"button\", 1, \"a-button\", \"a-button--small\", \"has-icon\"], [\"name\", \"ai-pencil-1\", \"ariaLabel\", \"Tekenen\"], [\"auiFlyoutZone\", \"\"], [1, \"m-selectable-list\", \"m-selectable-list--no-border\"], [\"auiFlyoutClose\", \"\"], [1, \"m-selectable-list__item\", 3, \"click\"]],\n    template: function LeafletDrawControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n        ɵngcc0.ɵɵelement(2, \"aui-icon\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3)(4, \"ul\", 4)(5, \"li\", 5)(6, \"a\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletDrawControlComponent_Template_a_click_6_listener() {\n          return ctx.map == null ? null : ctx.map.switchToPolygon();\n        });\n        ɵngcc0.ɵɵtext(7, \"Vorm intekenen\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(8, \"li\", 5)(9, \"a\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletDrawControlComponent_Template_a_click_9_listener() {\n          return ctx.map == null ? null : ctx.map.switchToLine();\n        });\n        ɵngcc0.ɵɵtext(10, \"Lijn/route intekenen\");\n        ɵngcc0.ɵɵelementEnd()()()()();\n      }\n    },\n    dependencies: [ɵngcc1.IconComponent, ɵngcc2.FlyoutActionDirective, ɵngcc2.FlyoutCloseDirective, ɵngcc2.FlyoutZoneDirective, ɵngcc2.FlyoutDirective],\n    encapsulation: 2\n  });\n  return LeafletDrawControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletDrawControlComponent.prototype.map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-fullscreen-control/leaflet-fullscreen-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletFullscreenControlComponent = /*#__PURE__*/(() => {\n  class LeafletFullscreenControlComponent {}\n  LeafletFullscreenControlComponent.ɵfac = function LeafletFullscreenControlComponent_Factory(t) {\n    return new (t || LeafletFullscreenControlComponent)();\n  };\n  LeafletFullscreenControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletFullscreenControlComponent,\n    selectors: [[\"aui-leaflet-fullscreen-control\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"icon\", \"ai-expand-2\", \"ariaLabel\", \"Volledig scherm (de)activeren\", 3, \"click\"]],\n    template: function LeafletFullscreenControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"aui-leaflet-control\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletFullscreenControlComponent_Template_aui_leaflet_control_click_0_listener() {\n          return ctx.map == null ? null : ctx.map.toggleFullScreen();\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [LeafletControlComponent],\n    encapsulation: 2\n  });\n  return LeafletFullscreenControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletFullscreenControlComponent.prototype.map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-locate-control/leaflet-locate-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletLocateControlComponent = /*#__PURE__*/(() => {\n  class LeafletLocateControlComponent {\n    constructor() {\n      this.zoomLevel = 19;\n    }\n  }\n  LeafletLocateControlComponent.ɵfac = function LeafletLocateControlComponent_Factory(t) {\n    return new (t || LeafletLocateControlComponent)();\n  };\n  LeafletLocateControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletLocateControlComponent,\n    selectors: [[\"aui-leaflet-locate-control\"]],\n    inputs: {\n      zoomLevel: \"zoomLevel\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"icon\", \"ai-location-target-1\", \"ariaLabel\", \"Huidige positie\", 3, \"disabled\", \"click\"]],\n    template: function LeafletLocateControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"aui-leaflet-control\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletLocateControlComponent_Template_aui_leaflet_control_click_0_listener() {\n          return ctx.map == null ? null : ctx.map.locate(ctx.zoomLevel);\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.map == null ? null : ctx.map.locating);\n      }\n    },\n    dependencies: [LeafletControlComponent],\n    encapsulation: 2\n  });\n  return LeafletLocateControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletLocateControlComponent.prototype.zoomLevel;\n  /** @type {?} */\n  LeafletLocateControlComponent.prototype.map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/controls/leaflet-zoom-control/leaflet-zoom-control.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletZoomControlComponent = /*#__PURE__*/(() => {\n  class LeafletZoomControlComponent {}\n  LeafletZoomControlComponent.ɵfac = function LeafletZoomControlComponent_Factory(t) {\n    return new (t || LeafletZoomControlComponent)();\n  };\n  LeafletZoomControlComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletZoomControlComponent,\n    selectors: [[\"aui-leaflet-zoom-control\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[\"icon\", \"ai-add\", \"ariaLabel\", \"Inzoomen\", 1, \"o-leaflet__zoom-control\", 3, \"disabled\", \"click\"], [\"icon\", \"ai-subtract\", \"ariaLabel\", \"Uitzoomen\", 1, \"o-leaflet__zoom-control\", 3, \"disabled\", \"click\"]],\n    template: function LeafletZoomControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"aui-leaflet-control\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletZoomControlComponent_Template_aui_leaflet_control_click_0_listener() {\n          return ctx.map == null ? null : ctx.map.zoomIn();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(1, \"aui-leaflet-control\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function LeafletZoomControlComponent_Template_aui_leaflet_control_click_1_listener() {\n          return ctx.map == null ? null : ctx.map.zoomOut();\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.map == null ? null : ctx.map.zoomInDisabled());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.map == null ? null : ctx.map.zoomOutDisabled());\n      }\n    },\n    dependencies: [LeafletControlComponent],\n    encapsulation: 2\n  });\n  return LeafletZoomControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletZoomControlComponent.prototype.map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/leaflet/leaflet.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletComponent = /*#__PURE__*/(() => {\n  class LeafletComponent {\n    constructor() {\n      this.hasSidebar = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n      // Make sure the map is properly rendered before initializing it\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.leafletMap.init(this.map.nativeElement);\n      });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n      [this.fullScreenControl, this.zoomControl, this.locateControl, this.dragControl, this.drawControl].forEach(\n      /**\n      * @param {?} control\n      * @return {?}\n      */\n      control => control ? control.map = this.leafletMap : null);\n    }\n  }\n  LeafletComponent.ɵfac = function LeafletComponent_Factory(t) {\n    return new (t || LeafletComponent)();\n  };\n  LeafletComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LeafletComponent,\n    selectors: [[\"aui-leaflet\"]],\n    contentQueries: function LeafletComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, LeafletFullscreenControlComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, LeafletZoomControlComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, LeafletLocateControlComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, LeafletDragControlComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, LeafletDrawControlComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fullScreenControl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.zoomControl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.locateControl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragControl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.drawControl = _t.first);\n      }\n    },\n    viewQuery: function LeafletComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.map = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    inputs: {\n      hasSidebar: \"hasSidebar\",\n      leafletMap: \"leafletMap\"\n    },\n    ngContentSelectors: _c5,\n    decls: 15,\n    vars: 6,\n    consts: [[1, \"aui-leaflet\", \"o-leaflet\", 3, \"ngClass\"], [1, \"o-leaflet__content\", 3, \"ngClass\"], [\"content\", \"\"], [1, \"o-leaflet__wrapper\"], [1, \"o-leaflet__map\"], [\"map\", \"\"], [1, \"o-leaflet__controls\", \"o-leaflet__controls--top-left\"], [1, \"o-leaflet__controls\", \"o-leaflet__controls--top-right\"], [1, \"o-leaflet__controls\", \"o-leaflet__controls--bottom-right\"], [1, \"o-leaflet__controls\", \"o-leaflet__controls--bottom-left\"]],\n    template: function LeafletComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4, 5);\n        ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n        ɵngcc0.ɵɵprojection(8, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 7);\n        ɵngcc0.ɵɵprojection(10, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"div\", 8);\n        ɵngcc0.ɵɵprojection(12, 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(13, \"div\", 9);\n        ɵngcc0.ɵɵprojection(14, 4);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c3, ctx.leafletMap.fullScreen));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c4, ctx.hasSidebar));\n      }\n    },\n    dependencies: [ɵngcc3.NgClass],\n    styles: [\":host{display:flex}\"],\n    encapsulation: 2\n  });\n  return LeafletComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /** @type {?} */\n  LeafletComponent.prototype.map;\n  /** @type {?} */\n  LeafletComponent.prototype.content;\n  /** @type {?} */\n  LeafletComponent.prototype.fullScreenControl;\n  /** @type {?} */\n  LeafletComponent.prototype.zoomControl;\n  /** @type {?} */\n  LeafletComponent.prototype.locateControl;\n  /** @type {?} */\n  LeafletComponent.prototype.dragControl;\n  /** @type {?} */\n  LeafletComponent.prototype.drawControl;\n  /** @type {?} */\n  LeafletComponent.prototype.leafletMap;\n  /** @type {?} */\n  LeafletComponent.prototype.hasSidebar;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/leaflet.conf.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst baseMapWorldGray = {\n  name: 'Base world gray',\n  url: 'https://{s}.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',\n  options: {\n    subdomains: ['server', 'services'],\n    maxNativeZoom: 16\n  }\n};\n/** @type {?} */\nconst baseMapAntwerp = {\n  name: 'Base antwerp',\n  url: 'https://basemap.antwerpen.be/tile/{z}/{y}/{x}',\n  options: {\n    minZoom: 13,\n    maxNativeZoom: 19,\n    maxZoom: 21\n  }\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/leaflet.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet LeafletModule = /*#__PURE__*/(() => {\n  class LeafletModule {}\n  LeafletModule.ɵfac = function LeafletModule_Factory(t) {\n    return new (t || LeafletModule)();\n  };\n  LeafletModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LeafletModule\n  });\n  LeafletModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, IconModule, FlyoutModule]\n  });\n  return LeafletModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LeafletModule, {\n    declarations: function () {\n      return [LeafletControlComponent, LeafletDragControlComponent, LeafletDrawControlComponent, LeafletFullscreenControlComponent, LeafletLocateControlComponent, LeafletZoomControlComponent, LeafletComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ReactiveFormsModule, IconModule, FlyoutModule];\n    },\n    exports: function () {\n      return [LeafletControlComponent, LeafletDragControlComponent, LeafletDrawControlComponent, LeafletFullscreenControlComponent, LeafletLocateControlComponent, LeafletZoomControlComponent, LeafletComponent];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: acpaas-ui-ngx-leaflet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LeafletComponent, LeafletControlComponent, LeafletDragControlComponent, LeafletDrawControlComponent, LeafletFullscreenControlComponent, LeafletLocateControlComponent, LeafletMap, LeafletModule, LeafletZoomControlComponent, MapService, baseMapAntwerp, baseMapWorldGray };\n\n//# sourceMappingURL=acpaas-ui-ngx-leaflet.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}