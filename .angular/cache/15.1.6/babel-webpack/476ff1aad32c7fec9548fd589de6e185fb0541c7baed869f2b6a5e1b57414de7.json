{"ast":null,"code":"import { Util, DomUtil } from 'leaflet';\nimport { Support } from './Support';\nvar callbacks = 0;\nfunction serialize(params) {\n  var data = '';\n  params.f = params.f || 'json';\n  for (var key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key)) {\n      var param = params[key];\n      var type = Object.prototype.toString.call(param);\n      var value;\n      if (data.length) {\n        data += '&';\n      }\n      if (type === '[object Array]') {\n        value = Object.prototype.toString.call(param[0]) === '[object Object]' ? JSON.stringify(param) : param.join(',');\n      } else if (type === '[object Object]') {\n        value = JSON.stringify(param);\n      } else if (type === '[object Date]') {\n        value = param.valueOf();\n      } else {\n        value = param;\n      }\n      data += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n    }\n  }\n  return data;\n}\nfunction createRequest(callback, context) {\n  var httpRequest = new window.XMLHttpRequest();\n  httpRequest.onerror = function (e) {\n    httpRequest.onreadystatechange = Util.falseFn;\n    callback.call(context, {\n      error: {\n        code: 500,\n        message: 'XMLHttpRequest error'\n      }\n    }, null);\n  };\n  httpRequest.onreadystatechange = function () {\n    var response;\n    var error;\n    if (httpRequest.readyState === 4) {\n      try {\n        response = JSON.parse(httpRequest.responseText);\n      } catch (e) {\n        response = null;\n        error = {\n          code: 500,\n          message: 'Could not parse response as JSON. This could also be caused by a CORS or XMLHttpRequest error.'\n        };\n      }\n      if (!error && response.error) {\n        error = response.error;\n        response = null;\n      }\n      httpRequest.onerror = Util.falseFn;\n      callback.call(context, error, response);\n    }\n  };\n  httpRequest.ontimeout = function () {\n    this.onerror();\n  };\n  return httpRequest;\n}\nfunction xmlHttpPost(url, params, callback, context) {\n  var httpRequest = createRequest(callback, context);\n  httpRequest.open('POST', url);\n  if (typeof context !== 'undefined' && context !== null) {\n    if (typeof context.options !== 'undefined') {\n      httpRequest.timeout = context.options.timeout;\n    }\n  }\n  httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n  httpRequest.send(serialize(params));\n  return httpRequest;\n}\nfunction xmlHttpGet(url, params, callback, context) {\n  var httpRequest = createRequest(callback, context);\n  httpRequest.open('GET', url + '?' + serialize(params), true);\n  if (typeof context !== 'undefined' && context !== null) {\n    if (typeof context.options !== 'undefined') {\n      httpRequest.timeout = context.options.timeout;\n      if (context.options.withCredentials) {\n        httpRequest.withCredentials = true;\n      }\n    }\n  }\n  httpRequest.send(null);\n  return httpRequest;\n}\n\n// AJAX handlers for CORS (modern browsers) or JSONP (older browsers)\nexport function request(url, params, callback, context) {\n  var paramString = serialize(params);\n  var httpRequest = createRequest(callback, context);\n  var requestLength = (url + '?' + paramString).length;\n\n  // ie10/11 require the request be opened before a timeout is applied\n  if (requestLength <= 2000 && Support.cors) {\n    httpRequest.open('GET', url + '?' + paramString);\n  } else if (requestLength > 2000 && Support.cors) {\n    httpRequest.open('POST', url);\n    httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n  }\n  if (typeof context !== 'undefined' && context !== null) {\n    if (typeof context.options !== 'undefined') {\n      httpRequest.timeout = context.options.timeout;\n      if (context.options.withCredentials) {\n        httpRequest.withCredentials = true;\n      }\n    }\n  }\n\n  // request is less than 2000 characters and the browser supports CORS, make GET request with XMLHttpRequest\n  if (requestLength <= 2000 && Support.cors) {\n    httpRequest.send(null);\n\n    // request is more than 2000 characters and the browser supports CORS, make POST request with XMLHttpRequest\n  } else if (requestLength > 2000 && Support.cors) {\n    httpRequest.send(paramString);\n\n    // request is less  than 2000 characters and the browser does not support CORS, make a JSONP request\n  } else if (requestLength <= 2000 && !Support.cors) {\n    return jsonp(url, params, callback, context);\n\n    // request is longer then 2000 characters and the browser does not support CORS, log a warning\n  } else {\n    warn('a request to ' + url + ' was longer then 2000 characters and this browser cannot make a cross-domain post request. Please use a proxy https://developers.arcgis.com/esri-leaflet/api-reference/request/');\n    return;\n  }\n  return httpRequest;\n}\nexport function jsonp(url, params, callback, context) {\n  window._EsriLeafletCallbacks = window._EsriLeafletCallbacks || {};\n  var callbackId = 'c' + callbacks;\n  params.callback = 'window._EsriLeafletCallbacks.' + callbackId;\n  window._EsriLeafletCallbacks[callbackId] = function (response) {\n    if (window._EsriLeafletCallbacks[callbackId] !== true) {\n      var error;\n      var responseType = Object.prototype.toString.call(response);\n      if (!(responseType === '[object Object]' || responseType === '[object Array]')) {\n        error = {\n          error: {\n            code: 500,\n            message: 'Expected array or object as JSONP response'\n          }\n        };\n        response = null;\n      }\n      if (!error && response.error) {\n        error = response;\n        response = null;\n      }\n      callback.call(context, error, response);\n      window._EsriLeafletCallbacks[callbackId] = true;\n    }\n  };\n  var script = DomUtil.create('script', null, document.body);\n  script.type = 'text/javascript';\n  script.src = url + '?' + serialize(params);\n  script.id = callbackId;\n  script.onerror = function (error) {\n    if (error && window._EsriLeafletCallbacks[callbackId] !== true) {\n      // Can't get true error code: it can be 404, or 401, or 500\n      var err = {\n        error: {\n          code: 500,\n          message: 'An unknown error occurred'\n        }\n      };\n      callback.call(context, err);\n      window._EsriLeafletCallbacks[callbackId] = true;\n    }\n  };\n  DomUtil.addClass(script, 'esri-leaflet-jsonp');\n  callbacks++;\n  return {\n    id: callbackId,\n    url: script.src,\n    abort: function () {\n      window._EsriLeafletCallbacks._callback[callbackId]({\n        code: 0,\n        message: 'Request aborted.'\n      });\n    }\n  };\n}\nvar get = Support.cors ? xmlHttpGet : jsonp;\nget.CORS = xmlHttpGet;\nget.JSONP = jsonp;\nexport function warn() {\n  if (console && console.warn) {\n    console.warn.apply(console, arguments);\n  }\n}\n\n// choose the correct AJAX handler depending on CORS support\nexport { get };\n\n// always use XMLHttpRequest for posts\nexport { xmlHttpPost as post };\n\n// export the Request object to call the different handlers for debugging\nexport var Request = {\n  request: request,\n  get: get,\n  post: xmlHttpPost\n};\nexport default Request;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}