{"ast":null,"code":"import { Path, Util, GeoJSON, latLng } from 'leaflet';\nimport { FeatureManager } from './FeatureManager';\nimport { warn } from '../../Util';\nexport var FeatureLayer = FeatureManager.extend({\n  options: {\n    cacheLayers: true\n  },\n  /**\r\n   * Constructor\r\n   */\n  initialize: function (options) {\n    if (options.apikey) {\n      options.token = options.apikey;\n    }\n    FeatureManager.prototype.initialize.call(this, options);\n    this._originalStyle = this.options.style;\n    this._layers = {};\n  },\n  /**\r\n   * Layer Interface\r\n   */\n\n  onRemove: function (map) {\n    for (var i in this._layers) {\n      map.removeLayer(this._layers[i]);\n      // trigger the event when the entire featureLayer is removed from the map\n      this.fire('removefeature', {\n        feature: this._layers[i].feature,\n        permanent: false\n      }, true);\n    }\n    return FeatureManager.prototype.onRemove.call(this, map);\n  },\n  createNewLayer: function (geojson) {\n    var layer = GeoJSON.geometryToLayer(geojson, this.options);\n    // trap for GeoJSON without geometry\n    if (layer) {\n      layer.defaultOptions = layer.options;\n    }\n    return layer;\n  },\n  _updateLayer: function (layer, geojson) {\n    // convert the geojson coordinates into a Leaflet LatLng array/nested arrays\n    // pass it to setLatLngs to update layer geometries\n    var latlngs = [];\n    var coordsToLatLng = this.options.coordsToLatLng || GeoJSON.coordsToLatLng;\n\n    // copy new attributes, if present\n    if (geojson.properties) {\n      layer.feature.properties = geojson.properties;\n    }\n    switch (geojson.geometry.type) {\n      case 'Point':\n        latlngs = GeoJSON.coordsToLatLng(geojson.geometry.coordinates);\n        layer.setLatLng(latlngs);\n        break;\n      case 'LineString':\n        latlngs = GeoJSON.coordsToLatLngs(geojson.geometry.coordinates, 0, coordsToLatLng);\n        layer.setLatLngs(latlngs);\n        break;\n      case 'MultiLineString':\n        latlngs = GeoJSON.coordsToLatLngs(geojson.geometry.coordinates, 1, coordsToLatLng);\n        layer.setLatLngs(latlngs);\n        break;\n      case 'Polygon':\n        latlngs = GeoJSON.coordsToLatLngs(geojson.geometry.coordinates, 1, coordsToLatLng);\n        layer.setLatLngs(latlngs);\n        break;\n      case 'MultiPolygon':\n        latlngs = GeoJSON.coordsToLatLngs(geojson.geometry.coordinates, 2, coordsToLatLng);\n        layer.setLatLngs(latlngs);\n        break;\n    }\n\n    // update symbol/style\n    this.redraw(layer.feature.id);\n  },\n  /**\r\n   * Feature Management Methods\r\n   */\n\n  createLayers: function (features) {\n    for (var i = features.length - 1; i >= 0; i--) {\n      var geojson = features[i];\n      var layer = this._layers[geojson.id];\n      var newLayer;\n      if (this._visibleZoom() && layer && !this._map.hasLayer(layer) && (!this.options.timeField || this._featureWithinTimeRange(geojson))) {\n        this._map.addLayer(layer);\n        this.fire('addfeature', {\n          feature: layer.feature\n        }, true);\n      }\n\n      // update geometry if the layer already existed.\n      if (layer && (layer.setLatLngs || layer.setLatLng)) {\n        this._updateLayer(layer, geojson);\n      }\n      if (!layer) {\n        newLayer = this.createNewLayer(geojson);\n        if (!newLayer) {\n          warn('invalid GeoJSON encountered');\n        } else {\n          newLayer.feature = geojson;\n\n          // bubble events from individual layers to the feature layer\n          newLayer.addEventParent(this);\n          if (this.options.onEachFeature) {\n            this.options.onEachFeature(newLayer.feature, newLayer);\n          }\n\n          // cache the layer\n          this._layers[newLayer.feature.id] = newLayer;\n\n          // style the layer\n          this.setFeatureStyle(newLayer.feature.id, this.options.style);\n          this.fire('createfeature', {\n            feature: newLayer.feature\n          }, true);\n\n          // add the layer if the current zoom level is inside the range defined for the layer, it is within the current time bounds or our layer is not time enabled\n          if (this._visibleZoom() && (!this.options.timeField || this.options.timeField && this._featureWithinTimeRange(geojson))) {\n            this._map.addLayer(newLayer);\n          }\n        }\n      }\n    }\n  },\n  addLayers: function (ids) {\n    for (var i = ids.length - 1; i >= 0; i--) {\n      var layer = this._layers[ids[i]];\n      if (layer && (!this.options.timeField || this._featureWithinTimeRange(layer.feature))) {\n        this._map.addLayer(layer);\n        this.fire('addfeature', {\n          feature: layer.feature\n        }, true);\n      }\n    }\n  },\n  removeLayers: function (ids, permanent) {\n    for (var i = ids.length - 1; i >= 0; i--) {\n      var id = ids[i];\n      var layer = this._layers[id];\n      if (layer) {\n        this.fire('removefeature', {\n          feature: layer.feature,\n          permanent: permanent\n        }, true);\n        this._map.removeLayer(layer);\n      }\n      if (layer && permanent) {\n        delete this._layers[id];\n      }\n    }\n  },\n  cellEnter: function (bounds, coords) {\n    if (this._visibleZoom() && !this._zooming && this._map) {\n      Util.requestAnimFrame(Util.bind(function () {\n        var cacheKey = this._cacheKey(coords);\n        var cellKey = this._cellCoordsToKey(coords);\n        var layers = this._cache[cacheKey];\n        if (this._activeCells[cellKey] && layers) {\n          this.addLayers(layers);\n        }\n      }, this));\n    }\n  },\n  cellLeave: function (bounds, coords) {\n    if (!this._zooming) {\n      Util.requestAnimFrame(Util.bind(function () {\n        if (this._map) {\n          var cacheKey = this._cacheKey(coords);\n          var cellKey = this._cellCoordsToKey(coords);\n          var layers = this._cache[cacheKey];\n          var mapBounds = this._map.getBounds();\n          if (!this._activeCells[cellKey] && layers) {\n            var removable = true;\n            for (var i = 0; i < layers.length; i++) {\n              var layer = this._layers[layers[i]];\n              if (layer && layer.getBounds && mapBounds.intersects(layer.getBounds())) {\n                removable = false;\n              }\n            }\n            if (removable) {\n              this.removeLayers(layers, !this.options.cacheLayers);\n            }\n            if (!this.options.cacheLayers && removable) {\n              delete this._cache[cacheKey];\n              delete this._cells[cellKey];\n              delete this._activeCells[cellKey];\n            }\n          }\n        }\n      }, this));\n    }\n  },\n  /**\r\n   * Styling Methods\r\n   */\n\n  resetStyle: function () {\n    this.options.style = this._originalStyle;\n    this.eachFeature(function (layer) {\n      this.resetFeatureStyle(layer.feature.id);\n    }, this);\n    return this;\n  },\n  setStyle: function (style) {\n    this.options.style = style;\n    this.eachFeature(function (layer) {\n      this.setFeatureStyle(layer.feature.id, style);\n    }, this);\n    return this;\n  },\n  resetFeatureStyle: function (id) {\n    var layer = this._layers[id];\n    var style = this._originalStyle || Path.prototype.options;\n    if (layer) {\n      Util.extend(layer.options, layer.defaultOptions);\n      this.setFeatureStyle(id, style);\n    }\n    return this;\n  },\n  setFeatureStyle: function (id, style) {\n    var layer = this._layers[id];\n    if (typeof style === 'function') {\n      style = style(layer.feature);\n    }\n    if (layer.setStyle) {\n      layer.setStyle(style);\n    }\n    return this;\n  },\n  /**\r\n   * Utility Methods\r\n   */\n\n  eachActiveFeature: function (fn, context) {\n    // figure out (roughly) which layers are in view\n    if (this._map) {\n      var activeBounds = this._map.getBounds();\n      for (var i in this._layers) {\n        if (this._currentSnapshot.indexOf(this._layers[i].feature.id) !== -1) {\n          // a simple point in poly test for point geometries\n          if (typeof this._layers[i].getLatLng === 'function' && activeBounds.contains(this._layers[i].getLatLng())) {\n            fn.call(context, this._layers[i]);\n          } else if (typeof this._layers[i].getBounds === 'function' && activeBounds.intersects(this._layers[i].getBounds())) {\n            // intersecting bounds check for polyline and polygon geometries\n            fn.call(context, this._layers[i]);\n          }\n        }\n      }\n    }\n    return this;\n  },\n  eachFeature: function (fn, context) {\n    for (var i in this._layers) {\n      fn.call(context, this._layers[i]);\n    }\n    return this;\n  },\n  getFeature: function (id) {\n    return this._layers[id];\n  },\n  bringToBack: function () {\n    this.eachFeature(function (layer) {\n      if (layer.bringToBack) {\n        layer.bringToBack();\n      }\n    });\n  },\n  bringToFront: function () {\n    this.eachFeature(function (layer) {\n      if (layer.bringToFront) {\n        layer.bringToFront();\n      }\n    });\n  },\n  redraw: function (id) {\n    if (id) {\n      this._redraw(id);\n    }\n    return this;\n  },\n  _redraw: function (id) {\n    var layer = this._layers[id];\n    var geojson = layer.feature;\n\n    // if this looks like a marker\n    if (layer && layer.setIcon && this.options.pointToLayer) {\n      // update custom symbology, if necessary\n      if (this.options.pointToLayer) {\n        var getIcon = this.options.pointToLayer(geojson, latLng(geojson.geometry.coordinates[1], geojson.geometry.coordinates[0]));\n        var updatedIcon = getIcon.options.icon;\n        layer.setIcon(updatedIcon);\n      }\n    }\n\n    // looks like a vector marker (circleMarker)\n    if (layer && layer.setStyle && this.options.pointToLayer) {\n      var getStyle = this.options.pointToLayer(geojson, latLng(geojson.geometry.coordinates[1], geojson.geometry.coordinates[0]));\n      var updatedStyle = getStyle.options;\n      this.setFeatureStyle(geojson.id, updatedStyle);\n    }\n\n    // looks like a path (polygon/polyline)\n    if (layer && layer.setStyle && this.options.style) {\n      this.resetFeatureStyle(geojson.id);\n    }\n  },\n  // This is the same as the Layer.openPopup method except it excludes the `FeatureGroup`\n  // logic to work around https://github.com/Leaflet/Leaflet/issues/8761\n  openPopup(latlng) {\n    if (this._popup) {\n      if (this._popup._prepareOpen(latlng || this._latlng)) {\n        // open the popup on the map\n        this._popup.openOn(this._map);\n      }\n    }\n    return this;\n  },\n  // This is the same as the `Layer.openTooltip` method except it excludes the `FeatureGroup`\n  // logic to work around https://github.com/Leaflet/Leaflet/issues/8761\n  openTooltip(latlng) {\n    if (this._tooltip) {\n      if (this._tooltip._prepareOpen(latlng)) {\n        // open the tooltip on the map\n        this._tooltip.openOn(this._map);\n        if (this.getElement) {\n          this._setAriaDescribedByOnLayer(this);\n        } else if (this.eachLayer) {\n          this.eachLayer(this._setAriaDescribedByOnLayer, this);\n        }\n      }\n    }\n    return this;\n  }\n});\nexport function featureLayer(options) {\n  return new FeatureLayer(options);\n}\nexport default featureLayer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}