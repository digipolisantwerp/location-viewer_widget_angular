{"ast":null,"code":"import { latLng } from 'leaflet';\nimport { Identify } from './Identify';\nimport { responseToFeatureCollection } from '../Util';\nexport var IdentifyImage = Identify.extend({\n  setters: {\n    setMosaicRule: 'mosaicRule',\n    setRenderingRule: 'renderingRule',\n    setPixelSize: 'pixelSize',\n    returnCatalogItems: 'returnCatalogItems',\n    returnGeometry: 'returnGeometry'\n  },\n  params: {\n    returnGeometry: false\n  },\n  at: function (latlng) {\n    latlng = latLng(latlng);\n    this.params.geometry = JSON.stringify({\n      x: latlng.lng,\n      y: latlng.lat,\n      spatialReference: {\n        wkid: 4326\n      }\n    });\n    this.params.geometryType = 'esriGeometryPoint';\n    return this;\n  },\n  getMosaicRule: function () {\n    return this.params.mosaicRule;\n  },\n  getRenderingRule: function () {\n    return this.params.renderingRule;\n  },\n  getPixelSize: function () {\n    return this.params.pixelSize;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      callback.call(context, error, response && this._responseToGeoJSON(response), response);\n    }, this);\n  },\n  // get pixel data and return as geoJSON point\n  // populate catalog items (if any)\n  // merging in any catalogItemVisibilities as a propery of each feature\n  _responseToGeoJSON: function (response) {\n    var location = response.location;\n    var catalogItems = response.catalogItems;\n    var catalogItemVisibilities = response.catalogItemVisibilities;\n    var geoJSON = {\n      pixel: {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [location.x, location.y]\n        },\n        crs: {\n          type: 'EPSG',\n          properties: {\n            code: location.spatialReference.wkid\n          }\n        },\n        properties: {\n          OBJECTID: response.objectId,\n          name: response.name,\n          value: response.value\n        },\n        id: response.objectId\n      }\n    };\n    if (response.properties && response.properties.Values) {\n      geoJSON.pixel.properties.values = response.properties.Values;\n    }\n    if (catalogItems && catalogItems.features) {\n      geoJSON.catalogItems = responseToFeatureCollection(catalogItems);\n      if (catalogItemVisibilities && catalogItemVisibilities.length === geoJSON.catalogItems.features.length) {\n        for (var i = catalogItemVisibilities.length - 1; i >= 0; i--) {\n          geoJSON.catalogItems.features[i].properties.catalogItemVisibility = catalogItemVisibilities[i];\n        }\n      }\n    }\n    return geoJSON;\n  }\n});\nexport function identifyImage(params) {\n  return new IdentifyImage(params);\n}\nexport default identifyImage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}