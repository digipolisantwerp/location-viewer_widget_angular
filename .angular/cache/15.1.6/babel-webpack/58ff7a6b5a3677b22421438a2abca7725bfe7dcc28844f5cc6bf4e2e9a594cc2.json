{"ast":null,"code":"import { latLng } from 'leaflet';\nimport { Identify } from './Identify';\nimport { responseToFeatureCollection, boundsToExtent, _setGeometry } from '../Util';\nexport var IdentifyFeatures = Identify.extend({\n  setters: {\n    layers: 'layers',\n    precision: 'geometryPrecision',\n    tolerance: 'tolerance',\n    // skipped implementing this (for now) because the REST service implementation isnt consistent between operations.\n    // 'transform': 'datumTransformations'\n    returnGeometry: 'returnGeometry'\n  },\n  params: {\n    sr: 4326,\n    layers: 'all',\n    tolerance: 3,\n    returnGeometry: true\n  },\n  on: function (map) {\n    var extent = boundsToExtent(map.getBounds());\n    var size = map.getSize();\n    this.params.imageDisplay = [size.x, size.y, 96];\n    this.params.mapExtent = [extent.xmin, extent.ymin, extent.xmax, extent.ymax];\n    return this;\n  },\n  at: function (geometry) {\n    // cast lat, long pairs in raw array form manually\n    if (geometry.length === 2) {\n      geometry = latLng(geometry);\n    }\n    this._setGeometryParams(geometry);\n    return this;\n  },\n  layerDef: function (id, where) {\n    this.params.layerDefs = this.params.layerDefs ? this.params.layerDefs + ';' : '';\n    this.params.layerDefs += [id, where].join(':');\n    return this;\n  },\n  simplify: function (map, factor) {\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\n    this.params.maxAllowableOffset = mapWidth / map.getSize().y * factor;\n    return this;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      // immediately invoke with an error\n      if (error) {\n        callback.call(context, error, undefined, response);\n\n        // ok no error lets just assume we have features...\n      } else {\n        var featureCollection = responseToFeatureCollection(response);\n        response.results = response.results.reverse();\n        for (var i = 0; i < featureCollection.features.length; i++) {\n          var feature = featureCollection.features[i];\n          feature.layerId = response.results[i].layerId;\n        }\n        callback.call(context, undefined, featureCollection, response);\n      }\n    });\n  },\n  _setGeometryParams: function (geometry) {\n    var converted = _setGeometry(geometry);\n    this.params.geometry = converted.geometry;\n    this.params.geometryType = converted.geometryType;\n  }\n});\nexport function identifyFeatures(options) {\n  return new IdentifyFeatures(options);\n}\nexport default identifyFeatures;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}