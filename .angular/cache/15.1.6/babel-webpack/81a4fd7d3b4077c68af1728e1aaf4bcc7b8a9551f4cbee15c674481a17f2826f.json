{"ast":null,"code":"import { Util, Evented } from 'leaflet';\nimport { cors } from '../Support';\nimport { cleanUrl, getUrlParams } from '../Util';\nimport Request from '../Request';\nexport var Service = Evented.extend({\n  options: {\n    proxy: false,\n    useCors: cors,\n    timeout: 0\n  },\n  initialize: function (options) {\n    options = options || {};\n    this._requestQueue = [];\n    this._authenticating = false;\n    Util.setOptions(this, options);\n    this.options.url = cleanUrl(this.options.url);\n  },\n  get: function (path, params, callback, context) {\n    return this._request('get', path, params, callback, context);\n  },\n  post: function (path, params, callback, context) {\n    return this._request('post', path, params, callback, context);\n  },\n  request: function (path, params, callback, context) {\n    return this._request('request', path, params, callback, context);\n  },\n  metadata: function (callback, context) {\n    return this._request('get', '', {}, callback, context);\n  },\n  authenticate: function (token) {\n    this._authenticating = false;\n    this.options.token = token;\n    this._runQueue();\n    return this;\n  },\n  getTimeout: function () {\n    return this.options.timeout;\n  },\n  setTimeout: function (timeout) {\n    this.options.timeout = timeout;\n  },\n  _request: function (method, path, params, callback, context) {\n    this.fire('requeststart', {\n      url: this.options.url + path,\n      params: params,\n      method: method\n    }, true);\n    var wrappedCallback = this._createServiceCallback(method, path, params, callback, context);\n    if (this.options.token) {\n      params.token = this.options.token;\n    }\n    if (this.options.requestParams) {\n      Util.extend(params, this.options.requestParams);\n    }\n    if (this._authenticating) {\n      this._requestQueue.push([method, path, params, callback, context]);\n    } else {\n      var url = this.options.proxy ? this.options.proxy + '?' + this.options.url + path : this.options.url + path;\n      if ((method === 'get' || method === 'request') && !this.options.useCors) {\n        return Request.get.JSONP(url, params, wrappedCallback, context);\n      } else {\n        return Request[method](url, params, wrappedCallback, context);\n      }\n    }\n  },\n  _createServiceCallback: function (method, path, params, callback, context) {\n    return Util.bind(function (error, response) {\n      if (error && (error.code === 499 || error.code === 498)) {\n        this._authenticating = true;\n        this._requestQueue.push([method, path, params, callback, context]);\n\n        // fire an event for users to handle and re-authenticate\n        this.fire('authenticationrequired', {\n          authenticate: Util.bind(this.authenticate, this)\n        }, true);\n\n        // if the user has access to a callback they can handle the auth error\n        error.authenticate = Util.bind(this.authenticate, this);\n      }\n      callback.call(context, error, response);\n      if (error) {\n        this.fire('requesterror', {\n          url: this.options.url + path,\n          params: params,\n          message: error.message,\n          code: error.code,\n          method: method\n        }, true);\n      } else {\n        this.fire('requestsuccess', {\n          url: this.options.url + path,\n          params: params,\n          response: response,\n          method: method\n        }, true);\n      }\n      this.fire('requestend', {\n        url: this.options.url + path,\n        params: params,\n        method: method\n      }, true);\n    }, this);\n  },\n  _runQueue: function () {\n    for (var i = this._requestQueue.length - 1; i >= 0; i--) {\n      var request = this._requestQueue[i];\n      var method = request.shift();\n      this[method].apply(this, request);\n    }\n    this._requestQueue = [];\n  }\n});\nexport function service(options) {\n  options = getUrlParams(options);\n  return new Service(options);\n}\nexport default service;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}