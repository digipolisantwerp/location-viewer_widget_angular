{"ast":null,"code":"import { ImageOverlay, CRS, DomUtil, Util, Layer, popup, latLng, bounds } from 'leaflet';\nimport { cors } from '../Support';\nimport { setEsriAttribution, removeEsriAttribution } from '../Util';\nvar Overlay = ImageOverlay.extend({\n  onAdd: function (map) {\n    this._topLeft = map.getPixelBounds().min;\n    ImageOverlay.prototype.onAdd.call(this, map);\n  },\n  _reset: function () {\n    if (this._map.options.crs === CRS.EPSG3857) {\n      ImageOverlay.prototype._reset.call(this);\n    } else {\n      DomUtil.setPosition(this._image, this._topLeft.subtract(this._map.getPixelOrigin()));\n    }\n  }\n});\nexport var RasterLayer = Layer.extend({\n  options: {\n    opacity: 1,\n    position: 'front',\n    f: 'image',\n    useCors: cors,\n    attribution: null,\n    interactive: false,\n    alt: ''\n  },\n  onAdd: function (map) {\n    // include 'Powered by Esri' in map attribution\n    setEsriAttribution(map);\n    if (this.options.zIndex) {\n      this.options.position = null;\n    }\n    this._update = Util.throttle(this._update, this.options.updateInterval, this);\n    map.on('moveend', this._update, this);\n\n    // if we had an image loaded and it matches the\n    // current bounds show the image otherwise remove it\n    if (this._currentImage && this._currentImage._bounds.equals(this._map.getBounds())) {\n      map.addLayer(this._currentImage);\n    } else if (this._currentImage) {\n      this._map.removeLayer(this._currentImage);\n      this._currentImage = null;\n    }\n    this._update();\n    if (this._popup) {\n      this._map.on('click', this._getPopupData, this);\n      this._map.on('dblclick', this._resetPopupState, this);\n    }\n\n    // add copyright text listed in service metadata\n    this.metadata(function (err, metadata) {\n      if (!err && !this.options.attribution && map.attributionControl && metadata.copyrightText) {\n        this.options.attribution = metadata.copyrightText;\n        map.attributionControl.addAttribution(this.getAttribution());\n      }\n    }, this);\n  },\n  onRemove: function (map) {\n    removeEsriAttribution(map);\n    if (this._currentImage) {\n      this._map.removeLayer(this._currentImage);\n    }\n    if (this._popup) {\n      this._map.off('click', this._getPopupData, this);\n      this._map.off('dblclick', this._resetPopupState, this);\n    }\n    this._map.off('moveend', this._update, this);\n  },\n  bindPopup: function (fn, popupOptions) {\n    this._shouldRenderPopup = false;\n    this._lastClick = false;\n    this._popup = popup(popupOptions);\n    this._popupFunction = fn;\n    if (this._map) {\n      this._map.on('click', this._getPopupData, this);\n      this._map.on('dblclick', this._resetPopupState, this);\n    }\n    return this;\n  },\n  unbindPopup: function () {\n    if (this._map) {\n      this._map.closePopup(this._popup);\n      this._map.off('click', this._getPopupData, this);\n      this._map.off('dblclick', this._resetPopupState, this);\n    }\n    this._popup = false;\n    return this;\n  },\n  bringToFront: function () {\n    this.options.position = 'front';\n    if (this._currentImage) {\n      this._currentImage.bringToFront();\n      this._setAutoZIndex(Math.max);\n    }\n    return this;\n  },\n  bringToBack: function () {\n    this.options.position = 'back';\n    if (this._currentImage) {\n      this._currentImage.bringToBack();\n      this._setAutoZIndex(Math.min);\n    }\n    return this;\n  },\n  setZIndex: function (value) {\n    this.options.zIndex = value;\n    if (this._currentImage) {\n      this._currentImage.setZIndex(value);\n    }\n    return this;\n  },\n  _setAutoZIndex: function (compare) {\n    // go through all other layers of the same pane, set zIndex to max + 1 (front) or min - 1 (back)\n    if (!this._currentImage) {\n      return;\n    }\n    var layers = this._currentImage.getPane().children;\n    var edgeZIndex = -compare(-Infinity, Infinity); // -Infinity for max, Infinity for min\n    for (var i = 0, len = layers.length, zIndex; i < len; i++) {\n      zIndex = layers[i].style.zIndex;\n      if (layers[i] !== this._currentImage._image && zIndex) {\n        edgeZIndex = compare(edgeZIndex, +zIndex);\n      }\n    }\n    if (isFinite(edgeZIndex)) {\n      this.options.zIndex = edgeZIndex + compare(-1, 1);\n      this.setZIndex(this.options.zIndex);\n    }\n  },\n  getAttribution: function () {\n    return this.options.attribution;\n  },\n  getOpacity: function () {\n    return this.options.opacity;\n  },\n  setOpacity: function (opacity) {\n    this.options.opacity = opacity;\n    if (this._currentImage) {\n      this._currentImage.setOpacity(opacity);\n    }\n    return this;\n  },\n  getTimeRange: function () {\n    return [this.options.from, this.options.to];\n  },\n  setTimeRange: function (from, to) {\n    this.options.from = from;\n    this.options.to = to;\n    this._update();\n    return this;\n  },\n  metadata: function (callback, context) {\n    this.service.metadata(callback, context);\n    return this;\n  },\n  authenticate: function (token) {\n    this.service.authenticate(token);\n    return this;\n  },\n  redraw: function () {\n    this._update();\n  },\n  _renderImage: function (url, bounds, contentType) {\n    if (this._map) {\n      // if no output directory has been specified for a service, MIME data will be returned\n      if (contentType) {\n        url = 'data:' + contentType + ';base64,' + url;\n      }\n\n      // if server returns an inappropriate response, abort.\n      if (!url) return;\n\n      // create a new image overlay and add it to the map\n      // to start loading the image\n      // opacity is 0 while the image is loading\n      var image = new Overlay(url, bounds, {\n        opacity: 0,\n        crossOrigin: this.options.withCredentials ? 'use-credentials' : this.options.useCors,\n        alt: this.options.alt,\n        pane: this.options.pane || this.getPane(),\n        interactive: this.options.interactive\n      }).addTo(this._map);\n      var onOverlayError = function () {\n        this._map.removeLayer(image);\n        this.fire('error');\n        image.off('load', onOverlayLoad, this);\n      };\n      var onOverlayLoad = function (e) {\n        image.off('error', onOverlayError, this);\n        if (this._map) {\n          var newImage = e.target;\n          var oldImage = this._currentImage;\n\n          // if the bounds of this image matches the bounds that\n          // _renderImage was called with and we have a map with the same bounds\n          // hide the old image if there is one and set the opacity\n          // of the new image otherwise remove the new image\n          if (newImage._bounds.equals(bounds) && newImage._bounds.equals(this._map.getBounds())) {\n            this._currentImage = newImage;\n            if (this.options.position === 'front') {\n              this.bringToFront();\n            } else if (this.options.position === 'back') {\n              this.bringToBack();\n            }\n            if (this.options.zIndex) {\n              this.setZIndex(this.options.zIndex);\n            }\n            if (this._map && this._currentImage._map) {\n              this._currentImage.setOpacity(this.options.opacity);\n            } else {\n              this._currentImage._map.removeLayer(this._currentImage);\n            }\n            if (oldImage && this._map) {\n              this._map.removeLayer(oldImage);\n            }\n            if (oldImage && oldImage._map) {\n              oldImage._map.removeLayer(oldImage);\n            }\n          } else {\n            this._map.removeLayer(newImage);\n          }\n        }\n        this.fire('load', {\n          bounds: bounds\n        });\n      };\n\n      // If loading the image fails\n      image.once('error', onOverlayError, this);\n\n      // once the image loads\n      image.once('load', onOverlayLoad, this);\n    }\n  },\n  _update: function () {\n    if (!this._map) {\n      return;\n    }\n    var zoom = this._map.getZoom();\n    var bounds = this._map.getBounds();\n    if (this._animatingZoom) {\n      return;\n    }\n    if (this._map._panTransition && this._map._panTransition._inProgress) {\n      return;\n    }\n    if (zoom > this.options.maxZoom || zoom < this.options.minZoom) {\n      if (this._currentImage) {\n        this._currentImage._map.removeLayer(this._currentImage);\n        this._currentImage = null;\n      }\n      return;\n    }\n    var params = this._buildExportParams();\n    Util.extend(params, this.options.requestParams);\n    if (params) {\n      this._requestExport(params, bounds);\n      this.fire('loading', {\n        bounds: bounds\n      });\n    } else if (this._currentImage) {\n      this._currentImage._map.removeLayer(this._currentImage);\n      this._currentImage = null;\n    }\n  },\n  _renderPopup: function (latlng, error, results, response) {\n    latlng = latLng(latlng);\n    if (this._shouldRenderPopup && this._lastClick.equals(latlng)) {\n      // add the popup to the map where the mouse was clicked at\n      var content = this._popupFunction(error, results, response);\n      if (content) {\n        this._popup.setLatLng(latlng).setContent(content).openOn(this._map);\n      }\n    }\n  },\n  _resetPopupState: function (e) {\n    this._shouldRenderPopup = false;\n    this._lastClick = e.latlng;\n  },\n  _calculateBbox: function () {\n    var pixelBounds = this._map.getPixelBounds();\n    var sw = this._map.unproject(pixelBounds.getBottomLeft());\n    var ne = this._map.unproject(pixelBounds.getTopRight());\n    var neProjected = this._map.options.crs.project(ne);\n    var swProjected = this._map.options.crs.project(sw);\n\n    // this ensures ne/sw are switched in polar maps where north/top bottom/south is inverted\n    var boundsProjected = bounds(neProjected, swProjected);\n    return [boundsProjected.getBottomLeft().x, boundsProjected.getBottomLeft().y, boundsProjected.getTopRight().x, boundsProjected.getTopRight().y].join(',');\n  },\n  _calculateImageSize: function () {\n    // ensure that we don't ask ArcGIS Server for a taller image than we have actual map displaying within the div\n    var bounds = this._map.getPixelBounds();\n    var size = this._map.getSize();\n    var sw = this._map.unproject(bounds.getBottomLeft());\n    var ne = this._map.unproject(bounds.getTopRight());\n    var top = this._map.latLngToLayerPoint(ne).y;\n    var bottom = this._map.latLngToLayerPoint(sw).y;\n    if (top > 0 || bottom < size.y) {\n      size.y = bottom - top;\n    }\n    return size.x + ',' + size.y;\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}