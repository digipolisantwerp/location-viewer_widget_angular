{"ast":null,"code":"import { Class, Util } from 'leaflet';\nimport { cors } from '../Support';\nimport { cleanUrl, getUrlParams } from '../Util';\nimport Request from '../Request';\nexport var Task = Class.extend({\n  options: {\n    proxy: false,\n    useCors: cors\n  },\n  // Generate a method for each methodName:paramName in the setters for this task.\n  generateSetter: function (param, context) {\n    return Util.bind(function (value) {\n      this.params[param] = value;\n      return this;\n    }, context);\n  },\n  initialize: function (endpoint) {\n    // endpoint can be either a url (and options) for an ArcGIS Rest Service or an instance of EsriLeaflet.Service\n    if (endpoint.request && endpoint.options) {\n      this._service = endpoint;\n      Util.setOptions(this, endpoint.options);\n    } else {\n      Util.setOptions(this, endpoint);\n      this.options.url = cleanUrl(endpoint.url);\n    }\n\n    // clone default params into this object\n    this.params = Util.extend({}, this.params || {});\n\n    // generate setter methods based on the setters object implimented a child class\n    if (this.setters) {\n      for (var setter in this.setters) {\n        var param = this.setters[setter];\n        this[setter] = this.generateSetter(param, this);\n      }\n    }\n  },\n  token: function (token) {\n    if (this._service) {\n      this._service.authenticate(token);\n    } else {\n      this.params.token = token;\n    }\n    return this;\n  },\n  apikey: function (apikey) {\n    return this.token(apikey);\n  },\n  // ArcGIS Server Find/Identify 10.5+\n  format: function (boolean) {\n    // use double negative to expose a more intuitive positive method name\n    this.params.returnUnformattedValues = !boolean;\n    return this;\n  },\n  request: function (callback, context) {\n    if (this.options.requestParams) {\n      Util.extend(this.params, this.options.requestParams);\n    }\n    if (this._service) {\n      return this._service.request(this.path, this.params, callback, context);\n    }\n    return this._request('request', this.path, this.params, callback, context);\n  },\n  _request: function (method, path, params, callback, context) {\n    var url = this.options.proxy ? this.options.proxy + '?' + this.options.url + path : this.options.url + path;\n    if ((method === 'get' || method === 'request') && !this.options.useCors) {\n      return Request.get.JSONP(url, params, callback, context);\n    }\n    return Request[method](url, params, callback, context);\n  }\n});\nexport function task(options) {\n  options = getUrlParams(options);\n  return new Task(options);\n}\nexport default task;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}